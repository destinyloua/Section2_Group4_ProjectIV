package back_end;

import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Vector;

import objects.*;

public class RequestHandler {	
	private static Packet packet = new Packet();
	private static ByteBuffer read;
	private static byte[] data;
	
	public static Vector<Plant> GetPlantsList(){
		Vector<Plant> plantsList = new Vector<>();
		packet.SetHeader(3, 2);
		packet.SetContent(0);
		SocketHandler.SendData(packet);
		
		
		Vector<Plant> plantsList = new Vector<>();
	    
	    // Receive the response header
	    byte[] receivedData = SocketHandler.ReceiveData();
	    if (receivedData == null || receivedData.length < 4) {
	        System.out.println("Error: Received invalid data (null or too short)");
	        return null;
	    }
	    
	    ByteBuffer read = ByteBuffer.wrap(receivedData);
	    int response = read.getInt();
	    
	    if (response == 1) { // Server confirms sending plant list
	        receivedData = SocketHandler.ReceiveData();
	        if (receivedData == null || receivedData.length < 4) {
	            System.out.println("Error: Failed to receive plant count");
	            return null;
	        }
	        
	        read = ByteBuffer.wrap(receivedData);
	        int plantCount = read.getInt();
	        System.out.println(plantCount + " plants will be received");

	        // Loop to receive each plant
	        for (int i = 0; i < plantCount; i++) {
	            // Receive plant object
	            byte[] plantData = SocketHandler.ReceiveData();
	            if (plantData == null || plantData.length == 0) {
	                System.out.println("Error: Plant data is missing");
	                return null;
	            }
	            Plant p = new Plant(plantData);

	            // Receive image size
	            receivedData = SocketHandler.ReceiveData();
	            if (receivedData == null || receivedData.length < 4) {
	                System.out.println("Error: Failed to receive image size");
	                return null;
	            }
	            read = ByteBuffer.wrap(receivedData);
	            int imgSize = read.getInt();
	            
	            // Prepare to receive image chunks
	            byte[] imgData = new byte[imgSize];
	            int chunkSize = 32768;
	            int totalChunks = (int) Math.ceil((double) imgSize / (chunkSize - 4));

	            for (int j = 0; j < totalChunks; j++) {
	                byte[] chunk = SocketHandler.ReceiveData();
	                if (chunk == null || chunk.length < 4) {
	                    System.out.println("Error: Received incomplete image chunk");
	                    return null;
	                }
	                
	                int startPosition = j * (chunkSize - 4);
	                int endPosition = Math.min(startPosition + (chunkSize - 4), imgSize);
	                int receivedChunkSize = endPosition - startPosition;

	                System.arraycopy(chunk, 4, imgData, startPosition, receivedChunkSize);
	                System.out.println("Received chunk " + j + " (" + receivedChunkSize + " bytes)");
	            }

	            // Save image to disk
	            try {
	                Path imagePath = Paths.get(p.GetImagePath());
	                Files.write(imagePath, imgData);
	                System.out.println("Image saved as: " + p.GetImagePath());
	            } catch (Exception e) {
	                System.out.println("Error saving image: " + e.getMessage());
	                return null;
	            }

	            plantsList.add(p);
	        }

	        return plantsList;
	    } else {
	        System.out.println("Server response: No plant list available");
	        return null;
	    }
	    
		
//		byte[] receivedData = SocketHandler.ReceiveData();
//		read = ByteBuffer.wrap(receivedData);
//		int response;
//		response = read.getInt();
//		if(response == 1) {
//			System.out.println(read.getInt() + " plants will receive");
//			for(int i=0; i< read.getInt(); i++) {
//				read = ByteBuffer.wrap(SocketHandler.ReceiveData());
//				read.getInt();
//				read.get(data);
//				Plant p = new Plant(data);
//				read = ByteBuffer.wrap(SocketHandler.ReceiveData());
//				read.getInt();
//				int imgSize = read.getInt();
//				byte[] imgData = new byte[imgSize];
//				int chunkSize = 32768;
//				int totalChunks = (int) Math.ceil((double) imgSize/(chunkSize-4));
//				for(int j =0;j<totalChunks;j++) {
//					data = SocketHandler.ReceiveData();
//					System.arraycopy(data, 4, imgData, chunkSize*j, data.length);
//				}
//		        try {
//		        	Path imagePath = Paths.get(p.GetImagePath());
//			        Files.write(imagePath, imgData);
//			        System.out.println("Image saved as: " + p.GetImagePath());
//		        }
//		        catch (Exception e){
//		        	System.out.println("Can't save image"+e.getMessage());
//		        }
//		        plantsList.add(p);
//			}
//			return plantsList;
//		}
//		else {
//			return null;
//		}
	}
	public static Boolean CreateAccount(Account a){
		packet.SetHeader(1, 1);
		packet.SetContent(a);
		SocketHandler.SendData(packet);
		
		byte[] receivedData = SocketHandler.ReceiveData();
		ByteBuffer read = ByteBuffer.wrap(receivedData);
		int response;
		response = read.getInt();
		if(response == 1) {
			return true;
		}
		else {
			return false;
		}
	}
	
	public static Boolean AuthenticateLogin(Account a) {
		packet.SetHeader(1, 2);
		packet.SetContent(a);
		SocketHandler.SendData(packet);

		byte[] receivedData = SocketHandler.ReceiveData();
		ByteBuffer read = ByteBuffer.wrap(receivedData);
		int header;
		header = read.getInt();
		if(header == 1) {
			int content = read.getInt();
			if(content == 1) {
				return true;
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}
	
	
}
